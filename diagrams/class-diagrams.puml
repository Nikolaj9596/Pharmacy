@startuml
' В поликлинике ведется учет посещений больными врачей.
' Данные о каждом враче содержат Ф.И.О., специальность и стаж работы. 
' Каждый врач может принимать множество пациентов, и каждый пациент может посещать нескольких врачей (в том числе в один и тот же день). 
' В карточке пациента указываются его Ф.И.О., дата рождения и адрес места жительства. 
' В результате визита врач ставит пациенту диагноз. 		          .
'     Для удобства анализа заболеваемости диагнозы стандартизованы и подлежат единому учету. .
' В целях анализа результатов работы поликлиники необходимо иметь возможность автоматически генерировать следующие документы: 		          .
' • перечень специалистов (список врачей по специальностям);		          .
' • количества визитов к врачам; 		          .
' • количества случаев заболевания по каждому диагнозу. 	             .
' Кроме того, необходимо иметь возможность просматривать для каждого из врачей список больных, которые посетили его за заданный период времени..	             .
' - В БД предусмотреть хранение изображений (минимум в одном поле) в соответствии с тематикой курсовой работы..
'  - В БД должны быть реализованы хранимые процедуры и/или триггеры.    
'   - в БД должно быть занесено суммарно не менее 50 записей   
'
enum Status{
  "ACTIVE",
  "CLOSED"
}

class CategoryDisease{
  + id: integer
  + name: string
}

class Profession{
  + id: integer
  + name: string
}

class Disease{
  + id: integer <<UniqueIdentifier>>
  + name: string
  + description: string
  + category_disease: CategoryDisease
  + created: datetime
}

class Client{
  + id: integer <<UniqueIdentifier>>
  + first_name: string
  + last_name: string
  + middle_name: string
  + date_birthday: date 
  + address: string
  + created: datetime
}

class Doctor {
  + id: integer <<UniqueIdentifier>>
  + first_name: string
  + last_name: string
  + middle_name: string
  + profession: Profession
  + date_start_work: date 
  + created: datetime
}

class Diagnosis {
  + id: integer <<UniqueIdentifier>>
  + name: string
  + description: string
  + client: Client
  + doctor: Doctor
  + disease: list[Disease]
  + status: Status
  + created: datetime
}

class DoctorAppointment{
  + id: integer <<UniqueIdentifier>>
  + doctor: Doctor
  + client: Client
  + start_date_appointment: datetime
  + end_date_appointment: datetime
  + created: datetime
}


DoctorAppointment *-up-> Doctor: "1" -- "0..*"
DoctorAppointment *-up-> Client: "1" -- "0..*"

Disease *-down-> CategoryDisease: "1" -- "1..*"
Diagnosis *-down-> Disease: "1..*" -- "1..*"
Diagnosis *-up-> Client: "1" -- "1..*"
Diagnosis *-up-> Doctor: "1" -- "1..*"
Diagnosis::status *-up-> Status
Doctor *-right-> Profession: "1" -- "1..*"

@enduml
